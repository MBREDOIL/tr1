import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import requests
from bs4 import BeautifulSoup
import hashlib
import json
from apscheduler.schedulers.background import BackgroundScheduler
import time

# ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡§Ø‡•Ç‡§ú‡§∞ ‡§°‡•á‡§ü‡§æ ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú (‡§∏‡§∞‡§≤ JSON ‡§´‡§º‡§æ‡§á‡§≤-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§)
USER_DATA_FILE = 'user_data.json'

def load_user_data():
    try:
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_user_data(user_data):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(user_data, f)

# ‡§µ‡•á‡§¨‡§™‡•á‡§ú ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§´‡•á‡§ö ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
def fetch_url_content(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.text
    except Exception as e:
        logger.error(f"Error fetching {url}: {e}")
        return None

# ‡§µ‡•á‡§¨‡§™‡•á‡§ú ‡§ö‡•á‡§Ç‡§ú ‡§°‡§ø‡§ü‡•á‡§ï‡•ç‡§∂‡§® ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
def check_website_changes(url, previous_hash):
    current_content = fetch_url_content(url)
    if current_content:
        current_hash = hashlib.sha256(current_content.encode()).hexdigest()
        return current_hash != previous_hash, current_hash
    return False, previous_hash

# ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤‡•ç‡§° ‡§ú‡•â‡§¨
def check_urls(context: CallbackContext):
    user_data = load_user_data()
    for user_id, data in user_data.items():
        for url_info in data['tracked_urls']:
            url = url_info['url']
            changed, new_hash = check_website_changes(url, url_info['hash'])
            if changed:
                context.bot.send_message(
                    chat_id=user_id,
                    text=f"üö® ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§Ü‡§Ø‡§æ ‡§π‡•à! {url}"
                )
                url_info['hash'] = new_hash
    save_user_data(user_data)

# ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡•â‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        '‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§¨‡•â‡§ü ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!\n\n'
        '‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:\n'
        '/track <url> - ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç\n'
        '/untrack <url> - ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§∞‡•ã‡§ï‡•á‡§Ç\n'
        '/list - ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡•Ä ‡§ó‡§à ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç'
    )

def track(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    url = ' '.join(context.args).strip()
    
    if not url.startswith(('http://', 'https://')):
        update.message.reply_text("‚ö† ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•à‡§ß URL ‡§°‡§æ‡§≤‡•á‡§Ç (http/https ‡§ï‡•á ‡§∏‡§æ‡§•)")
        return
    
    user_data = load_user_data()
    if user_id not in user_data:
        user_data[user_id] = {'tracked_urls': []}
    
    # ‡§°‡•Å‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§ü ‡§ö‡•á‡§ï
    if any(u['url'] == url for u in user_data[user_id]['tracked_urls']):
        update.message.reply_text("‚ùå ‡§Ø‡§π URL ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à")
        return
    
    # ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§π‡•à‡§∂ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    content = fetch_url_content(url)
    if not content:
        update.message.reply_text("‚ùå URL ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§æ")
        return
    
    new_hash = hashlib.sha256(content.encode()).hexdigest()
    user_data[user_id]['tracked_urls'].append({
        'url': url,
        'hash': new_hash
    })
    save_user_data(user_data)
    update.message.reply_text(f"‚úÖ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç: {url}")

def untrack(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    url = ' '.join(context.args).strip()
    
    user_data = load_user_data()
    if user_id not in user_data:
        update.message.reply_text("‚ùå ‡§ï‡•ã‡§à ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§ø‡§è ‡§ó‡§è URL ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á")
        return
    
    # URL ‡§π‡§ü‡§æ‡§è‡§Ç
    original_count = len(user_data[user_id]['tracked_urls'])
    user_data[user_id]['tracked_urls'] = [
        u for u in user_data[user_id]['tracked_urls'] 
        if u['url'] != url
    ]
    
    if len(user_data[user_id]['tracked_urls']) < original_count:
        save_user_data(user_data)
        update.message.reply_text(f"‚ùé ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§¨‡§Ç‡§¶: {url}")
    else:
        update.message.reply_text("‚ùå URL ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ")

def list_urls(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]['tracked_urls']:
        update.message.reply_text("üì≠ ‡§Ü‡§™‡§®‡•á ‡§Ö‡§≠‡•Ä ‡§ï‡•ã‡§à URL ‡§ü‡•ç‡§∞‡•à‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à")
        return
    
    urls = "\n".join([u['url'] for u in user_data[user_id]['tracked_urls']])
    update.message.reply_text(f"üìú ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§ø‡§è ‡§ó‡§è URLs:\n\n{urls}")

def main():
    # ‡§¨‡•â‡§ü ‡§ü‡•ã‡§ï‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§°‡•á‡§ü‡§∞ ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç
    updater = Updater(token="YOUR_TELEGRAM_BOT_TOKEN", use_context=True)
    
    # ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("track", track))
    dp.add_handler(CommandHandler("untrack", untrack))
    dp.add_handler(CommandHandler("list", list_urls))
    
    # ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤‡§∞ ‡§∏‡•á‡§ü‡§Ö‡§™ (‡§π‡§∞ 5 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§ö‡•á‡§ï)
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_urls, 'interval', minutes=5, args=[updater])
    scheduler.start()
    
    # ‡§¨‡•â‡§ü ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
